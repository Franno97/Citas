// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mre.Sb.Cita.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

namespace Mre.Sb.Cita.Migrations
{
    [DbContext(typeof(CitaDbContext))]
    [Migration("20220325023702_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mre.Sb.Cita.Dominio.Cita", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("Mre.Sb.Cita.Dominio.Feriado", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UnidadAdministrativaCalendarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnidadAdministrativaCalendarioId");

                    b.ToTable("Feriado");
                });

            modelBuilder.Entity("Mre.Sb.Cita.Dominio.ServicioCalendario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CitaAutomatica")
                        .HasColumnType("bit");

                    b.Property<int>("DiasDisponibilidad")
                        .HasColumnType("int");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinAgendamiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasGracia")
                        .HasColumnType("int");

                    b.Property<DateTime>("InicioAgendamiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanTrabajo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UsarVentanillas")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ServicioCalendario");
                });

            modelBuilder.Entity("Mre.Sb.Cita.Dominio.UnidadAdministrativaCalendario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanTrabajo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UnidadAdministrativaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UnidadAdministrativaCalendario");
                });

            modelBuilder.Entity("Mre.Sb.Cita.Dominio.Feriado", b =>
                {
                    b.HasOne("Mre.Sb.Cita.Dominio.UnidadAdministrativaCalendario", null)
                        .WithMany("Feriados")
                        .HasForeignKey("UnidadAdministrativaCalendarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Mre.Sb.Cita.Dominio.UnidadAdministrativaCalendario", b =>
                {
                    b.Navigation("Feriados");
                });
#pragma warning restore 612, 618
        }
    }
}
